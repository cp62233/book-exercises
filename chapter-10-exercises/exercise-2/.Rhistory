meals
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] <- lunch = meals[[2]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
mealsÂ¥lunch2 <- meals$lunch
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals$lunch2 <- meals$lunch
mrals
meal
meals
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(
meals[1:2]
)
early_meals
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
numbers_item_each_meal <- list(
length(meals)
)
early_meals
numbers_item_each_meal
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
numbers_item_each_meal <- list(
length(meals[])
)
numbers_item_each_meal
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
numbers_item_each_meal <- list(
breakfast = length(meals$breakfast),
lunch = length(meals$lunch),
dinner = length(meals$dinner)
)
meals
meals[4] <- null
meals[4] <- NULL
meals
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
numbers_item_each_meal <- list(
breakfast = length(meals$breakfast),
lunch = length(meals$lunch),
dinner = length(meals$dinner)
)
numbers_item_each_meal
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal_vector){
new_vector <- c(meal_vector, "pizza")
return(new_vector)
}
length(meals$breakfast)
length(meals$lunch)
length(meals$dinner)
numbers_of_meals <- lapply(meals, length)
print(numbers_of_meals)
source('~/Desktop/book-exercises/chapter-08-exercises/exercise-1/exercise.R')
# Create a vector `better_meals` that is all your meals, but with pizza!
lapply(meals,add_pizza)
source('~/Desktop/book-exercises/chapter-08-exercises/exercise-1/exercise.R')
# Create a vector `better_meals` that is all your meals, but with pizza!
lapply(meals,add_pizza)
sharks <- c("Hammerhead", "Great White", "Thresher")
print(updated_sharks)
updated_sharks <- c(Sharks, 'Goblin')
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, 'Goblin')
updated_sharks <- c(sharks, 'Goblin')
sharks
updated_sharks <- c(sharks, 'Goblin')
sharks
sharks <- c(sharks, 'Goblin')
sharks
updated_sharks <- c(harks, 'Goblin')
print(updated_sharks)
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(harks, 'Goblin')
updated_sharks <- c(sharks, 'Goblin')
print(updated_sharks)
earthquakes[ earthquakes > 6.5]
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes[ earthquakes > 6.5]
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
print(endangered(filter))
print(endangered[filter])
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[-4]
shark_length[4]
is.list(shark_length)
is.list(shark_length[4])
is.list(shark_length[[4]])
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
lab_grades[[is_participant]] <- "Yes"
lab_grades[["is_participant"]] <- "Yes"
lab_grades
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) - discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
total_after_tax
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * 0.9
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * (1+ sales_tax)
total_after_tax
print(round(total_after_tax,2))
shark_length[4]
shark_length[[4]]
source('~/Desktop/a2-core-skills-cp62233/assignment.R')
long_titles <- books[nchar(books) > 19]
print(long_titles)
long_titles <- books[nchar(books) > 15]
print(long_titles)
my_age <- 21
my_name <- "Peng Chen"
#take two argument "name" and "age" and return an introduction
make_introduction <- function(name, age){
introduction <- paste("Hello, my name is ", name,
" and I'm ",age, " years old.",sep = '')
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
print(casual_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
spring_break <- as.Date("3/21/2020", "%m/%d/%y")
today <- Sys.Date()
spring_break-today
day_to_break <- difftime(spring_break, today)
day_to_break
a2_deadline <- as.Date('2020-01-23')
#passing a date and return a boolean to
#tell us whether the date has passed or not
date_has_passed <- function(date_to_test, ignore_year = FALSE){
if (ignore_year == TRUE){#If we are going to ignore year
current_date_string <- as.character(Sys.Date())#get current date
current_year_string <- substr(current_date_string,1,4)#get current year
date_ignore_year <- change_year(date_to_test,current_year_string)#change the year to current year
return(Sys.Date() - date_ignore_year > 0)#compare the date in the same year
}
return( Sys.Date() - date_to_test > 0)
}
day_to_break <- difftime(spring_break, today)
clear()
clear()
clean
clean()
a = list()
aaaa = list(1='a', 2="b")
aaaa = list(1 ='a', 2 ="b")
aaaa = list("one" ='a', "two" ="b")
aaaa
aaaa["three"] <- "c"
aaaa
aaaa[[5]]
aaaa[5]
aaaa[[5]]
aaaa[5] <- 'five'
aaaa
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("sandwich", "juice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("steak", "7up")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(
breakfast = my_breakfast,
lunch = my_lunch
)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("salad", "apple")
meals <- c(meals, my_dinner)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals$dinner <- c("salad", "apple")
meal
meals
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("sandwich", "juice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("steak", "7up")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(
breakfast = my_breakfast,
lunch = my_lunch
)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("salad", "apple")
meals <- c(meals, my_dinner)
meals
meals["6"]
meals['6'] <- 'a'='b'
meals['6'] <- a='b'
meals['6'] <- a ='b'
meals['6'] = 'a'
mmeals
meals
meals['6'] = NULL
meals[[5]]
meals[5]
meals
meals[1]
meals[2]
meals[5]
meals[4]
meals[6] = 'luch'
meals
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("sandwich", "juice")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("steak", "7up")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(
breakfast = my_breakfast,
lunch = my_lunch
)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("salad", "apple")
meals <- c(meals, my_dinner)
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
meals$dinner <- c("salad", "apple")
meals
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] = meals$lunch
meals$lunch
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals['5'] = meals$lunch
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[5] = NULL
meals[5] = meals$lunch
meals[5]
meals[[5]]
meals[[5]] = meals$lunch
meals
c("aaa", 1,2)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
index <- c(1:100)
index
employees <- paste("Employee", as.character(index))
employees
runif(40000,50000)
a = runif(40000,50000)a
a = runif(40000,50000)
index <- c(1:100)
employees <- paste("Employee", as.character(index))
runif(40000,50000)
runif(2,1,100)
class(runif(2,1,100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000,50000)
salaries
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000,50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salaries_adjust_2017 <- runif(100, -5000, 10000)
salaries_adjust_2017
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- NULL
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_adjust_2017, stringsAsFactors = F)
salaries
a = c(2:101)
a
salaries(, salaries_2017)
salaries( salaries_2017 , )
View(salaries)
salaries(, 'salaries_2017')
salaries[, 'salaries_2017']
colnames(salaries)
colnames(salaries) <- c(colnames(salaries), "look")
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
colnames(salaries) <- c(colnames(salaries), salaries_2018 <- (salaries_2017+salaries_adjust_2017))
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
colnames(salaries) <- c(colnames(salaries), salaries_2018 <- (salaries_2017+salaries_adjust_2017))
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
colnames(salaries) <- c(colnames(salaries), salaries_2018 <- (salaries_2017+salaries_adjust_2017))
salaries_2017+salaries_adjust_2017
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
employees
View(salaries)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000,50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salaries_adjust_2017 <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_adjust_2017, stringsAsFactors = F)
View(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
colnames(5) <- "salaries_2018"
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
colnames(salaries)[4] <- "salaries_2018"
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries[,4] <- salaries[, "salaries_2017"]+salaries[, "salaries_adjust_2017" ]
View(salaries)
colnames(salaries)[4] <- "salaries_2018"
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries[,5] <- (salaries[,"salaries_2017"] < salaries[, sal]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries[,5] <- (salaries[,"salaries_2017"] < salaries[, "salaries_2018"]
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries[,5] <- (salaries[,"salaries_2017"] < salaries[, "salaries_2018"])
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries[,5] <- (salaries[,"salaries_adjust_2017"] > 0
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries[,5] <- (salaries[,"salaries_adjust_2017"] > 0)
colnames(salaries)[5] <- "is_promotion"
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries[,5] <- (salaries[,"salaries_adjust_2017"] > 0)
colnames(salaries)[5] <- "is_promotion"
View(salaries)
# What was the 2018 salary of Employee 57
salaries["employees 57", "salaries_2018" ]
salaries["employees 57", "salaries_2018" ]
salaries["Employees 57", "salaries_2018" ]
# What was the 2018 salary of Employee 57
salaries[salaries$employees = "employees 57", "salaries_2018" ]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "employees 57", "salaries_2018" ]
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "employees 57", "salaries_2018" ])
# What was the 2018 salary of Employee 57
print(salaries[ salaries$employees == "employees 57", "salaries_2018" ])
# How many employees got a raise?
nrow(salaries[salaries$is_promotion == T, ])
# What was the dollar value of the highest raise?
salaries[ salaries$salaries_adjust_2017 == max()]
# What was the dollar value of the highest raise?
salaries[ salaries$salaries_adjust_2017 == max() ]
salaries[ salaries$salaries_adjust_2017 == biggiest_raise ]
# What was the dollar value of the highest raise?
biggiest_raise <- max(salaries$salaries_adjust_2017)
salaries[ salaries$salaries_adjust_2017 == biggiest_raise ]
# What was the dollar value of the highest raise?
biggiest_raise <- max(salaries$salaries_adjust_2017)
salaries[ salaries$salaries_adjust_2017 == biggiest_raise ]
salaries[ salaries$salaries_adjust_2017 == max(salaries$salaries_adjust_2017) ]
salaries[ salaries$salaries_adjust_2017 == max(salaries$salaries_adjust_2017) ,'adjustments' ]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000,50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salaries_adjust_2017 <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees,salaries_2017,salaries_adjust_2017, stringsAsFactors = F)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries[,4] <- salaries[, "salaries_2017"]+salaries[, "salaries_adjust_2017" ]
colnames(salaries)[4] <- "salaries_2018"
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries[,5] <- (salaries[,"salaries_adjust_2017"] > 0)
colnames(salaries)[5] <- "is_promotion"
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
print(salaries[ salaries$employees == "employees 57", "salaries_2018" ])
# How many employees got a raise?
nrow(salaries[salaries$is_promotion == T, ])
# What was the dollar value of the highest raise?
biggiest_raise <- max(salaries$salaries_adjust_2017)
salaries[ salaries$salaries_adjust_2017 == max(salaries$salaries_adjust_2017) ,'adjustments' ]
biggiest_raise
# What was the 2018 salary of Employee 57
print(salaries[ salaries$employees == "Employees 57", "salaries_2018" ])
# What was the 2018 salary of Employee 57
print(salaries[ salaries$employees == "Employee 57", "salaries_2018" ])
# What was the dollar value of the highest raise?
biggiest_raise <- max(salaries$salaries_adjust_2017)
salaries[ salaries$salaries_adjust_2017 == max(salaries$salaries_adjust_2017) ,'adjustments' ]
# What was the 2018 salary of Employee 57
print(salaries[ salaries$employees == "Employee 57", "salaries_2018" ])
salaries[ salaries$salaries_adjust_2017 == max(salaries$salaries_adjust_2017) ]
salaries[ salaries$salaries_adjust_2017 == max(salaries$salaries_adjust_2017), salaries_adjust_2017 ]
salaries[ salaries$salaries_adjust_2017 == max(salaries$salaries_adjust_2017), "salaries_adjust_2017
]
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# What was the 2018 salary of Employee 57
print(salaries[ salaries$employees == "Employee 57", "salaries_2018" ])
salaries[ salaries$salaries_adjust_2017 == max(salaries$salaries_adjust_2017), "salaries_adjust_2017"]
class(colnames(salaries)[5])
salaries[ salaries$salaries_adjust_2017 == biggest_raise, "salaries_adjust_2017"]
salaries[ salaries$salaries_adjust_2017 == biggiest_raise, "salaries_adjust_2017"]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salaries_adjust_2017 == biggiest_raise, "employees"]
# What was the largest decrease in salaries between the two years?
biggist_decrease <- min(salaries$salaries_adjust_2017)
salaries[ salaries$salaries_adjust_2017 == biggist_decrease, "salaries_adjust_2017"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salaries_adjust_2017 == biggiest_decrease, "employees"]
# What was the largest decrease in salaries between the two years?
biggiest_decrease <- min(salaries$salaries_adjust_2017)
salaries[ salaries$salaries_adjust_2017 == biggiest_decrease, "salaries_adjust_2017"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salaries_adjust_2017 == biggiest_decrease, "employees"]
# What was the average salary change?
ave(salaries[, "salaries_adjust_2017"])
# What was the average salary change?
ave(salaries$salaries_adjust_2017)
mean(paycut)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$is_promotion = F]
mean(paycut)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$is_promotion == F]
mean(paycut)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$is_promotion == F]
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$is_promotion == F, "salaries_adjust_2017"]
mean(paycut)
# What was the average salary change?
mean(salaries[, salaries_adjust_2017])
# What was the average salary change?
mean(salaries[, "s"alaries_adjust_2017""])
# What was the average salary change?
mean(salaries[, "alaries_adjust_2017""])
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$is_promotion == F, "salaries_adjust_2017"]
mean(paycut)
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# What was the average salary change?
mean(salaries[, "alaries_adjust_2017"])
# What was the average salary change?
mean(salaries[, "salaries_adjust_2017"])
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.esv", row.names = F)
setwd("~/")
getwd()
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-2")
getwd()
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.esv", row.names = F)
