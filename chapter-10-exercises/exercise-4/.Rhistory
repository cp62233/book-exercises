is.list(shark_length)
is.list(shark_length[4])
is.list(shark_length[[4]])
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
lab_grades[[is_participant]] <- "Yes"
lab_grades[["is_participant"]] <- "Yes"
lab_grades
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) - discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
total_after_tax
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * 0.9
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * (1+ sales_tax)
total_after_tax
print(round(total_after_tax,2))
shark_length[4]
shark_length[[4]]
source('~/Desktop/a2-core-skills-cp62233/assignment.R')
long_titles <- books[nchar(books) > 19]
print(long_titles)
long_titles <- books[nchar(books) > 15]
print(long_titles)
my_age <- 21
my_name <- "Peng Chen"
#take two argument "name" and "age" and return an introduction
make_introduction <- function(name, age){
introduction <- paste("Hello, my name is ", name,
" and I'm ",age, " years old.",sep = '')
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
print(casual_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
spring_break <- as.Date("3/21/2020", "%m/%d/%y")
today <- Sys.Date()
spring_break-today
day_to_break <- difftime(spring_break, today)
day_to_break
a2_deadline <- as.Date('2020-01-23')
#passing a date and return a boolean to
#tell us whether the date has passed or not
date_has_passed <- function(date_to_test, ignore_year = FALSE){
if (ignore_year == TRUE){#If we are going to ignore year
current_date_string <- as.character(Sys.Date())#get current date
current_year_string <- substr(current_date_string,1,4)#get current year
date_ignore_year <- change_year(date_to_test,current_year_string)#change the year to current year
return(Sys.Date() - date_ignore_year > 0)#compare the date in the same year
}
return( Sys.Date() - date_to_test > 0)
}
day_to_break <- difftime(spring_break, today)
clear()
clear()
clean
clean()
a = list()
aaaa = list(1='a', 2="b")
aaaa = list(1 ='a', 2 ="b")
aaaa = list("one" ='a', "two" ="b")
aaaa
aaaa["three"] <- "c"
aaaa
aaaa[[5]]
aaaa[5]
aaaa[[5]]
aaaa[5] <- 'five'
aaaa
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
View(USPersonalExpenditure)
View(USJudgeRatings)
class(USPersonalExpenditure)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditure_df <- data.frame(USPersonalExpenditure)
View(USPersonalExpenditure_df)
# What are the column names of your dataframe?
print(colnames(USPersonalExpenditure_df))
USPersonalExpenditure_df$1940
colnames(USPersonalExpenditure_df)[1] <- 1940
USPersonalExpenditure_df$1940
USPersonalExpenditure_df[ , "1940"]
USPersonalExpenditure_df[ , 1940]
# What are the row names of your dataframe?
print(rownames(USPersonalExpenditure_df))
USPersonalExpenditure_df[1]
USPersonalExpenditure_df[2]
USPersonalExpenditure_df[, 2]
USPersonalExpenditure_df[[2]]
# Add a column "category" to your data frame that contains the rownames
USPersonalExpenditure_df[[ncol(USPersonalExpenditure_df) + 1]] <- rownames(USPersonalExpenditure_df)
# Add a column "category" to your data frame that contains the rownames
col_number <- USPersonalExpenditure_df
# Add a column "category" to your data frame that contains the rownames
col_number <- ncol(USPersonalExpenditure_df)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditure_df <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
print(colnames(USPersonalExpenditure_df))
# What are the row names of your dataframe?
print(rownames(USPersonalExpenditure_df))
# Add a column "category" to your data frame that contains the rownames
col_number <- ncol(USPersonalExpenditure_df)
USPersonalExpenditure_df[[col_number + 1]] <- rownames(USPersonalExpenditure_df)
colnames(USPersonalExpenditure_df)[col_number + 1]
colnames(USPersonalExpenditure_df)[col_number + 1] <- "category"
# How much money was spent on personal care in 1940?
USPersonalExpenditure_df["personal care", "X1940"]
# How much money was spent on personal care in 1940?
USPersonalExpenditure_df["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
USPersonalExpenditure_df["Food and Tabocco", "X1960"]
# How much money was spent on Food and Tobacco in 1960?
USPersonalExpenditure_df["Food and Tobacco", "X1960"]
max(USPersonalExpenditure_df)
max(USPersonalExpenditure_df$X1960)
# What was the highest expenditure category in 1960?
USPersonalExpenditure_df[USPersonalExpenditure_df$X1960 == max(USPersonalExpenditure_df$X1960), "category"]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
year <- paste("X", year, sep = '')
USPersonalExpenditure_df[USPersonalExpenditure_df$year == min(USPersonalExpenditure_df$year), "category"]
}
lowest_category(1960)
year <- 1960
year <- paste("X", year, sep = '')
year
USPersonalExpenditure_df$year
USPersonalExpenditure_df$X1960
USPersonalExpenditure_df$"X1960"
USPersonalExpenditure_df$year
class(year)
min(USPersonalExpenditure_df$year
)
min(USPersonalExpenditure_df$year)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
USPersonalExpenditure_df[USPersonalExpenditure_df$year == min(USPersonalExpenditure_df$year), "category"]
}
lowest_category("X1960")
min(USPersonalExpenditure_df[year]
)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
year <- paste("X", year, sep = '')
USPersonalExpenditure_df[USPersonalExpenditure_df[year] == min(USPersonalExpenditure_df[year]), "category"]
}
lowest_category()
lowest_category(1960)
seq(1,5)
1,5,2
seq(1,5,2)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
year = seq(1940, 1960, 5)
lowest_category(years)
year
years
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
years = seq(1940, 1960, 5)
lowest_category(years)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
years = seq(1940, 1960, 5)
years
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
year <- paste("X", year, sep = '')
print(USPersonalExpenditure_df[USPersonalExpenditure_df[year] == min(USPersonalExpenditure_df[year]), "category"])
}
lowest_category(years)
paste("X", years, sep = '')
USPersonalExpenditure_df[1,3] <- 1
lowest_category(years)
source('~/Desktop/book-exercises/chapter-10-exercises/exercise-3/exercise.R', echo=TRUE)
sapply( USPersonalExpenditure_df , lowest_category)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
#year <- paste("X", year, sep = '')
print(USPersonalExpenditure_df[USPersonalExpenditure_df[year] == min(USPersonalExpenditure_df[year]), "category"])
}
years = seq(1940, 1960, 5)
sapply( USPersonalExpenditure_df , lowest_category)
?sapply(list, function)
?sapply
sapply( USPersonalExpenditure_df , lowest_category, years)
sapply( USPersonalExpenditure_df , lowest_category, simplify = years)
sapply( USPersonalExpenditure_df , lowest_category, simplify = False)
sapply( USPersonalExpenditure_df , lowest_category)
sapply( USPersonalExpenditure_df[years] , lowest_category)
USPersonalExpenditure_df[years]
USPersonalExpenditure_df
USPersonalExpenditure_df["X1940"]
USPersonalExpenditure_df[ , years]
USPersonalExpenditure_df[ , "X1940"]
USPersonalExpenditure_df[ , paste("X", years, collapse = '')]
seq(1940, 1960, 5)
years <- seq((1940, 1960, 5))
years <- seq(1940, 1960, 5)
years
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
get_col_mean <- function(col){
mean(col, na.rm = TRUE)
}
print(get_col_mean(life_exp_df[ , "X2018"]))
world_average <- lapply(life_exp_df[-1], get_col_mean)
world_change_18 <- world_average$X2018 - world_average$X1918
new_col <- ncol(life_exp_df)+1
life_exp_df[new_col] <- life_exp_df$X2016 - life_exp_df$X1996
colnames(life_exp_df)[new_col] <- "recent_change"
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE), "country"]
print(most_improved)
#take a data frame and a string of country name. It will return the the change
#in life expectancy between 1968 and 2018 of this country.
get_country_change <- function(df, country_name){
year_change <- df[df$country == country_name, "X2018"] - df[df$country == country_name, "X1968"]
print(year_change)
}
get_country_change(life_exp_df, "Haiti")
#take three argumets. They are a data frame and two countries' names. The function will return a data frame with
#the counties' names, life expectancies in 2018 and the recent changes.
compare_countries <- function(df, country1, country2){
country <- c(country1, country2)
X2018_1 <- df[df$country == country1, "X2018"]
X2018_2 <- df[df$country == country2, "X2018"]
X2018 <- c(X2018_1, X2018_2)
recent_change_1 <- df[df$country == country1, "recent_change"]
recent_change_2 <- df[df$country == country2, "recent_change"]
recent_change <- c(recent_change_1, recent_change_2)
data.frame(country, X2018, recent_change)
}
us_vs_cuba <- compare_countries(life_exp_df, "United States", "Cuba")
#The data set is a combination of three sources. Data from 1800 to 1970 is maily from Mattias Lindgren's complilation.
#Data from 1970 to 2016 is from IHME (Institute for Health Metrics and Evaluation, University of Washington, Seattle).
#Data from 2017 to 2099 UN's forecast on 2017.
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
get_col_mean <- function(col){
mean(col, na.rm = TRUE)
}
print(get_col_mean(life_exp_df[ , "X2018"]))
world_average <- lapply(life_exp_df[-1], get_col_mean)
world_change_18 <- world_average$X2018 - world_average$X1918
new_col <- ncol(life_exp_df)+1
life_exp_df[new_col] <- life_exp_df$X2016 - life_exp_df$X1996
colnames(life_exp_df)[new_col] <- "recent_change"
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE), "country"]
print(most_improved)
#take a data frame and a string of country name. It will return the the change
#in life expectancy between 1968 and 2018 of this country.
get_country_change <- function(df, country_name){
year_change <- df[df$country == country_name, "X2018"] - df[df$country == country_name, "X1968"]
print(year_change)
}
get_country_change(life_exp_df, "Haiti")
#take three argumets. They are a data frame and two countries' names. The function will return a data frame with
#the counties' names, life expectancies in 2018 and the recent changes.
compare_countries <- function(df, country1, country2){
country <- c(country1, country2)
X2018_1 <- df[df$country == country1, "X2018"]
X2018_2 <- df[df$country == country2, "X2018"]
X2018 <- c(X2018_1, X2018_2)
recent_change_1 <- df[df$country == country1, "recent_change"]
recent_change_2 <- df[df$country == country2, "recent_change"]
recent_change <- c(recent_change_1, recent_change_2)
data.frame(country, X2018, recent_change)
}
us_vs_cuba <- compare_countries(life_exp_df, "United States", "Cuba")
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/a3-using-data-cp62233")
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
get_col_mean <- function(col){
mean(col, na.rm = TRUE)
}
print(get_col_mean(life_exp_df[ , "X2018"]))
world_average <- lapply(life_exp_df[-1], get_col_mean)
world_change_18 <- world_average$X2018 - world_average$X1918
new_col <- ncol(life_exp_df)+1
life_exp_df[new_col] <- life_exp_df$X2016 - life_exp_df$X1996
colnames(life_exp_df)[new_col] <- "recent_change"
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE), "country"]
print(most_improved)
#take a data frame and a string of country name. It will return the the change
#in life expectancy between 1968 and 2018 of this country.
get_country_change <- function(df, country_name){
year_change <- df[df$country == country_name, "X2018"] - df[df$country == country_name, "X1968"]
print(year_change)
}
get_country_change(life_exp_df, "Haiti")
#take three argumets. They are a data frame and two countries' names. The function will return a data frame with
#the counties' names, life expectancies in 2018 and the recent changes.
compare_countries <- function(df, country1, country2){
country <- c(country1, country2)
X2018_1 <- df[df$country == country1, "X2018"]
X2018_2 <- df[df$country == country2, "X2018"]
X2018 <- c(X2018_1, X2018_2)
recent_change_1 <- df[df$country == country1, "recent_change"]
recent_change_2 <- df[df$country == country2, "recent_change"]
recent_change <- c(recent_change_1, recent_change_2)
data.frame(country, X2018, recent_change)
}
us_vs_cuba <- compare_countries(life_exp_df, "United States", "Cuba")
us_vs_cuba <- compare_countries(life_exp_df, "United States", "Cuba")
print(us_vs_cuba)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# What was the mean grant value?
mean(grants$total_amount)
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), 'organization']
# Which organization received the smallest grant?
[grants$total_amount == min(grants$total_amount), 'organization']
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), 'organization']
# How many grants were awarded in 2010?
nrow(grants[grants$start_year == "2010", ])
sum(grants[grants$start_year == "2010", "total_amount"])
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- rownames(grants)
organization
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[, "organizataion"]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[, "organization"]
organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
print(is.vector(organization))
# What was the dollar amount of the largest grant?
print(grants[grants$total_amount == max(grants$total_amount), "total_amount"])
# What was the dollar amount of the smallest grant?
print(grants[grants$total_amount == min(grants$total_amount), "total_amount"])
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
#################
#### PART 1 #####
#################
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
row_num <- nrow(ta_grades)
col_num <- ncol(ta_grades)
colnames_string <- paste( colnames(ta_grades) , collapse = ", " )
table_description <- paste("The grade data frame has ", row_num, " rows and ", col_num,
" cols: ", colnames_string , ".", sep = '')
print(table_description)
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
better_at_math <- c(ta_grades$math_grade>ta_grades$spanish_grade)
ta_grades[[4]] <- better_at_math
colnames(ta_grades)[4] <- "better_at_math"
print(ta_grades[ta_grades$ta == "Gavin Sreesangkom", ])
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == T, ])
print(num_better_at_math)
data("Titanic")
print(is.data.frame(Titanic))
Titanic_df <- data.frame(Titanic)
print(is.data.frame(Titanic_df))
children <- data.frame(
Titanic_df[Titanic_df$Age == "Child" , ]
)
num_children <- sum(children$Freq)
print(num_children)
not_survive <- Titanic_df[Titanic_df$Survived == "No", ]
most_losses <- not_survive[not_survive$Freq == max(not_survive$Freq), ]
print(most_losses)
print(calc_survival_rate("3rd"))
#################
#### PART 1 #####
#################
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
row_num <- nrow(ta_grades)
col_num <- ncol(ta_grades)
colnames_string <- paste( colnames(ta_grades) , collapse = ", " )
table_description <- paste("The grade data frame has ", row_num, " rows and ", col_num,
" cols: ", colnames_string , ".", sep = '')
print(table_description)
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
better_at_math <- c(ta_grades$math_grade>ta_grades$spanish_grade)
ta_grades[[4]] <- better_at_math
colnames(ta_grades)[4] <- "better_at_math"
print(ta_grades[ta_grades$ta == "Gavin Sreesangkom", ])
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == T, ])
print(num_better_at_math)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- 4.0
ta_grades[ ta_grades$spanish_grade > 4.0, "spanish_grade" ] <- 4.0
write.csv(ta_grades, "data/ta_grades.csv", row.names = FALSE)
#################
#### PART 2 #####
#################
data("Titanic")
print(is.data.frame(Titanic))
Titanic_df <- data.frame(Titanic)
print(is.data.frame(Titanic_df))
children <- data.frame(
Titanic_df[Titanic_df$Age == "Child" , ]
)
num_children <- sum(children$Freq)
print(num_children)
not_survive <- Titanic_df[Titanic_df$Survived == "No", ]
most_losses <- not_survive[not_survive$Freq == max(not_survive$Freq), ]
print(most_losses)
#take a string variable "ticket" that indicate the class. Then the function will return a sentence
#(string) describing the survival rates of (adult) men vs. that of the combined "women and children"
#within that ticketing class.
calc_survival_rate <- function(ticket){
#calculate the male survival rate of the class
survive_male_adult <- Titanic_df[(Titanic_df$Survived == "Yes") & (Titanic_df$Class == ticket) &
(Titanic_df$Sex == "Male") & (Titanic_df$Age == "Adult") ,"Freq"]
male_adult <- Titanic_df[ (Titanic_df$Class == ticket) &
(Titanic_df$Sex == "Male") & (Titanic_df$Age == "Adult") ,"Freq"]
male_survival_rate <- round(survive_male_adult / sum(male_adult),2) *100
#calculate the female survival and children rate of the class
survivel_female_and_child <- Titanic_df[(Titanic_df$Survived == "Yes") & (Titanic_df$Class == ticket) &
((Titanic_df$Sex == "Female") | (Titanic_df$Age == "Child")) ,"Freq"]
female_and_child <- Titanic_df[(Titanic_df$Class == ticket) &
((Titanic_df$Sex == "Female") | (Titanic_df$Age == "Child")) ,"Freq"]
female_and_child_survival_rate <- round(sum(survivel_female_and_child) / sum(female_and_child),2) *100
#generate the sentence to show the result
paste("Of ", ticket, " class, ", male_survival_rate, "% of men survived and ", female_and_child_survival_rate,
"% of women and children survived.", sep = '')
}
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
get_col_mean <- function(col){
mean(col, na.rm = TRUE)
}
print(get_col_mean(life_exp_df[ , "X2018"]))
world_average <- lapply(life_exp_df[-1], get_col_mean)
world_change_18 <- world_average$X2018 - world_average$X1918
print(world_change_18)
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
print(get_country_change(life_exp_df, "Haiti"))
print(get_country_change(life_exp_df, "Haiti"))
#take a data frame and a string of country name. It will return the the change
#in life expectancy between 1968 and 2018 of this country.
get_country_change <- function(df, country_name){
year_change <- df[df$country == country_name, "X2018"] - df[df$country == country_name, "X1968"]
}
print(get_country_change(life_exp_df, "Haiti"))
source('~/Desktop/a3-using-data-cp62233/assignment.R', echo=TRUE)
