is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
USPersonalExpenditure_df <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
print(colnames(USPersonalExpenditure_df))
# What are the row names of your dataframe?
print(rownames(USPersonalExpenditure_df))
# Add a column "category" to your data frame that contains the rownames
col_number <- ncol(USPersonalExpenditure_df)
USPersonalExpenditure_df[[col_number + 1]] <- rownames(USPersonalExpenditure_df)
colnames(USPersonalExpenditure_df)[col_number + 1]
colnames(USPersonalExpenditure_df)[col_number + 1] <- "category"
# How much money was spent on personal care in 1940?
USPersonalExpenditure_df["personal care", "X1940"]
# How much money was spent on personal care in 1940?
USPersonalExpenditure_df["Personal Care", "X1940"]
# How much money was spent on Food and Tobacco in 1960?
USPersonalExpenditure_df["Food and Tabocco", "X1960"]
# How much money was spent on Food and Tobacco in 1960?
USPersonalExpenditure_df["Food and Tobacco", "X1960"]
max(USPersonalExpenditure_df)
max(USPersonalExpenditure_df$X1960)
# What was the highest expenditure category in 1960?
USPersonalExpenditure_df[USPersonalExpenditure_df$X1960 == max(USPersonalExpenditure_df$X1960), "category"]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
year <- paste("X", year, sep = '')
USPersonalExpenditure_df[USPersonalExpenditure_df$year == min(USPersonalExpenditure_df$year), "category"]
}
lowest_category(1960)
year <- 1960
year <- paste("X", year, sep = '')
year
USPersonalExpenditure_df$year
USPersonalExpenditure_df$X1960
USPersonalExpenditure_df$"X1960"
USPersonalExpenditure_df$year
class(year)
min(USPersonalExpenditure_df$year
)
min(USPersonalExpenditure_df$year)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
USPersonalExpenditure_df[USPersonalExpenditure_df$year == min(USPersonalExpenditure_df$year), "category"]
}
lowest_category("X1960")
min(USPersonalExpenditure_df[year]
)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
year <- paste("X", year, sep = '')
USPersonalExpenditure_df[USPersonalExpenditure_df[year] == min(USPersonalExpenditure_df[year]), "category"]
}
lowest_category()
lowest_category(1960)
seq(1,5)
1,5,2
seq(1,5,2)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
year = seq(1940, 1960, 5)
lowest_category(years)
year
years
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
years = seq(1940, 1960, 5)
lowest_category(years)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
years = seq(1940, 1960, 5)
years
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
year <- paste("X", year, sep = '')
print(USPersonalExpenditure_df[USPersonalExpenditure_df[year] == min(USPersonalExpenditure_df[year]), "category"])
}
lowest_category(years)
paste("X", years, sep = '')
USPersonalExpenditure_df[1,3] <- 1
lowest_category(years)
source('~/Desktop/book-exercises/chapter-10-exercises/exercise-3/exercise.R', echo=TRUE)
sapply( USPersonalExpenditure_df , lowest_category)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year){
#year <- paste("X", year, sep = '')
print(USPersonalExpenditure_df[USPersonalExpenditure_df[year] == min(USPersonalExpenditure_df[year]), "category"])
}
years = seq(1940, 1960, 5)
sapply( USPersonalExpenditure_df , lowest_category)
?sapply(list, function)
?sapply
sapply( USPersonalExpenditure_df , lowest_category, years)
sapply( USPersonalExpenditure_df , lowest_category, simplify = years)
sapply( USPersonalExpenditure_df , lowest_category, simplify = False)
sapply( USPersonalExpenditure_df , lowest_category)
sapply( USPersonalExpenditure_df[years] , lowest_category)
USPersonalExpenditure_df[years]
USPersonalExpenditure_df
USPersonalExpenditure_df["X1940"]
USPersonalExpenditure_df[ , years]
USPersonalExpenditure_df[ , "X1940"]
USPersonalExpenditure_df[ , paste("X", years, collapse = '')]
seq(1940, 1960, 5)
years <- seq((1940, 1960, 5))
years <- seq(1940, 1960, 5)
years
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
get_col_mean <- function(col){
mean(col, na.rm = TRUE)
}
print(get_col_mean(life_exp_df[ , "X2018"]))
world_average <- lapply(life_exp_df[-1], get_col_mean)
world_change_18 <- world_average$X2018 - world_average$X1918
new_col <- ncol(life_exp_df)+1
life_exp_df[new_col] <- life_exp_df$X2016 - life_exp_df$X1996
colnames(life_exp_df)[new_col] <- "recent_change"
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE), "country"]
print(most_improved)
#take a data frame and a string of country name. It will return the the change
#in life expectancy between 1968 and 2018 of this country.
get_country_change <- function(df, country_name){
year_change <- df[df$country == country_name, "X2018"] - df[df$country == country_name, "X1968"]
print(year_change)
}
get_country_change(life_exp_df, "Haiti")
#take three argumets. They are a data frame and two countries' names. The function will return a data frame with
#the counties' names, life expectancies in 2018 and the recent changes.
compare_countries <- function(df, country1, country2){
country <- c(country1, country2)
X2018_1 <- df[df$country == country1, "X2018"]
X2018_2 <- df[df$country == country2, "X2018"]
X2018 <- c(X2018_1, X2018_2)
recent_change_1 <- df[df$country == country1, "recent_change"]
recent_change_2 <- df[df$country == country2, "recent_change"]
recent_change <- c(recent_change_1, recent_change_2)
data.frame(country, X2018, recent_change)
}
us_vs_cuba <- compare_countries(life_exp_df, "United States", "Cuba")
#The data set is a combination of three sources. Data from 1800 to 1970 is maily from Mattias Lindgren's complilation.
#Data from 1970 to 2016 is from IHME (Institute for Health Metrics and Evaluation, University of Washington, Seattle).
#Data from 2017 to 2099 UN's forecast on 2017.
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
get_col_mean <- function(col){
mean(col, na.rm = TRUE)
}
print(get_col_mean(life_exp_df[ , "X2018"]))
world_average <- lapply(life_exp_df[-1], get_col_mean)
world_change_18 <- world_average$X2018 - world_average$X1918
new_col <- ncol(life_exp_df)+1
life_exp_df[new_col] <- life_exp_df$X2016 - life_exp_df$X1996
colnames(life_exp_df)[new_col] <- "recent_change"
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE), "country"]
print(most_improved)
#take a data frame and a string of country name. It will return the the change
#in life expectancy between 1968 and 2018 of this country.
get_country_change <- function(df, country_name){
year_change <- df[df$country == country_name, "X2018"] - df[df$country == country_name, "X1968"]
print(year_change)
}
get_country_change(life_exp_df, "Haiti")
#take three argumets. They are a data frame and two countries' names. The function will return a data frame with
#the counties' names, life expectancies in 2018 and the recent changes.
compare_countries <- function(df, country1, country2){
country <- c(country1, country2)
X2018_1 <- df[df$country == country1, "X2018"]
X2018_2 <- df[df$country == country2, "X2018"]
X2018 <- c(X2018_1, X2018_2)
recent_change_1 <- df[df$country == country1, "recent_change"]
recent_change_2 <- df[df$country == country2, "recent_change"]
recent_change <- c(recent_change_1, recent_change_2)
data.frame(country, X2018, recent_change)
}
us_vs_cuba <- compare_countries(life_exp_df, "United States", "Cuba")
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
install.packages("dplyr")
library("dplyer")
library("dplyr")
install.packages("pscl")
library("pscl")
View(presidentialElections)
votes <- select(presidentialElections, demVote, year)
class(votes)
View(votes)
View(votes)
View(votes)
votes <- presidentialElections[, c ("year", "demVote")]
votes <- presidentialElections[, c ("year", "demVote")]
View(votes)
library("dplyr")
votes <- select(presidentialElections, demVote, year)
votes <- presidentialElections[, c ("year", "demVote")]
select(presidentialElections, state:year)
select(presidentialElections, -south)
grouped <- group_by(presidentialElections, state)
grouped
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
state_voting_summary <- presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
state_voting_summary <- presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
presidentialElections <- mutate(
presidentialElections,
other_parties_vote = 100 - demVote, # other parties is 100% - Democrat %
abs_vote_difference = abs(demVote - other_parties_vote)
)
state_voting_summary <- presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
state_voting_summary
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
row_num <- nrow(ta_grades)
col_num <- ncol(ta_grades)
colnames_string <- paste( colnames(ta_grades) , collapse = ", " )
table_description <- paste("The grade data frame has ", row_num, " rows and ", col_num,
" cols: ", colnames_string , ".", sep = '')
print(table_description)
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
better_at_math <- c(ta_grades$math_grade>ta_grades$spanish_grade)
ta_grades[[4]] <- better_at_math
colnames(ta_grades)[4] <- "better_at_math"
print(ta_grades[ta_grades$ta == "Gavin Sreesangkom", ])
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == T, ])
print(num_better_at_math)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- 4.0
ta_grades[ ta_grades$spanish_grade > 4.0, "spanish_grade" ] <- 4.0
View(ta_grades)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- round(4,digits = 2)
ta_grades
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- round(4,digits = 1)
ta_grades
#################
#### PART 1 #####
#################
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
row_num <- nrow(ta_grades)
col_num <- ncol(ta_grades)
colnames_string <- paste( colnames(ta_grades) , collapse = ", " )
table_description <- paste("The grade data frame has ", row_num, " rows and ", col_num,
" cols: ", colnames_string , ".", sep = '')
print(table_description)
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
better_at_math <- c(ta_grades$math_grade>ta_grades$spanish_grade)
ta_grades[[4]] <- better_at_math
colnames(ta_grades)[4] <- "better_at_math"
print(ta_grades[ta_grades$ta == "Gavin Sreesangkom", ])
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == T, ])
print(num_better_at_math)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- round(4,digits = 1)
#################
#### PART 1 #####
#################
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
row_num <- nrow(ta_grades)
col_num <- ncol(ta_grades)
colnames_string <- paste( colnames(ta_grades) , collapse = ", " )
table_description <- paste("The grade data frame has ", row_num, " rows and ", col_num,
" cols: ", colnames_string , ".", sep = '')
print(table_description)
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
better_at_math <- c(ta_grades$math_grade>ta_grades$spanish_grade)
ta_grades[[4]] <- better_at_math
colnames(ta_grades)[4] <- "better_at_math"
print(ta_grades[ta_grades$ta == "Gavin Sreesangkom", ])
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == T, ])
print(num_better_at_math)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- round(4, digits = 1)
as.numeric(as.character(4.0))
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
row_num <- nrow(ta_grades)
col_num <- ncol(ta_grades)
colnames_string <- paste( colnames(ta_grades) , collapse = ", " )
table_description <- paste("The grade data frame has ", row_num, " rows and ", col_num,
" cols: ", colnames_string , ".", sep = '')
print(table_description)
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
better_at_math <- c(ta_grades$math_grade>ta_grades$spanish_grade)
ta_grades[[4]] <- better_at_math
colnames(ta_grades)[4] <- "better_at_math"
print(ta_grades[ta_grades$ta == "Gavin Sreesangkom", ])
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == T, ])
print(num_better_at_math)
View(ta_grades)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- as.numeric(as.character(4.0))
ta_grades[ ta_grades$math_grade >= 4.0, "math_grade" ] <- as.character(4.0)
View(ta_grades)
ta_grades[ ta_grades$math_grade >= 4.0, "math_grade" ] <- as.character("4.0")
?rmorm
?stat::rnorm
?stats::rnorm
data("Titanic")
print(is.data.frame(Titanic))
Titanic_df <- data.frame(Titanic)
print(is.data.frame(Titanic_df))
children <- data.frame(
Titanic_df[Titanic_df$Age == "Child" , ]
)
num_children <- sum(children$Freq)
print(num_children)
not_survive <- Titanic_df[Titanic_df$Survived == "No", ]
most_losses <- not_survive[not_survive$Freq == max(not_survive$Freq), ]
print(most_losses)
install.packages(c("devtools", "fueleconomy"))
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View("vehicles")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View("vehicles")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
setwd("~/Desktop/book-exercises/chapter-11-exercises/exercise-1")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(Vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
library(dplyr)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, manufacturers)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
View(manufacturers)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles$make
manufacturers
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length (unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997", ]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty)/2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive"]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive"]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive", ]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd == min(vehicles_2wd$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id" ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
class(vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id" ])
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id" ]
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
library(dplyr)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length (unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty)/2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive", ]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id" ]
hello <- vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id"]
hello
class(hello)
print(hello)
is.vector(hello)
vector(hello)
install.packages("pkgconfig")
install.packages("pkgconfig")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
setwd("~/Desktop/book-exercises/chapter-11-exercises/exercise-1")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
setwd("~/Desktop/book-exercises/chapter-11-exercises/exercise-1")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
