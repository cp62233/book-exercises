sapply( USPersonalExpenditure_df[years] , lowest_category)
USPersonalExpenditure_df[years]
USPersonalExpenditure_df
USPersonalExpenditure_df["X1940"]
USPersonalExpenditure_df[ , years]
USPersonalExpenditure_df[ , "X1940"]
USPersonalExpenditure_df[ , paste("X", years, collapse = '')]
seq(1940, 1960, 5)
years <- seq((1940, 1960, 5))
years <- seq(1940, 1960, 5)
years
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
get_col_mean <- function(col){
mean(col, na.rm = TRUE)
}
print(get_col_mean(life_exp_df[ , "X2018"]))
world_average <- lapply(life_exp_df[-1], get_col_mean)
world_change_18 <- world_average$X2018 - world_average$X1918
new_col <- ncol(life_exp_df)+1
life_exp_df[new_col] <- life_exp_df$X2016 - life_exp_df$X1996
colnames(life_exp_df)[new_col] <- "recent_change"
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE), "country"]
print(most_improved)
#take a data frame and a string of country name. It will return the the change
#in life expectancy between 1968 and 2018 of this country.
get_country_change <- function(df, country_name){
year_change <- df[df$country == country_name, "X2018"] - df[df$country == country_name, "X1968"]
print(year_change)
}
get_country_change(life_exp_df, "Haiti")
#take three argumets. They are a data frame and two countries' names. The function will return a data frame with
#the counties' names, life expectancies in 2018 and the recent changes.
compare_countries <- function(df, country1, country2){
country <- c(country1, country2)
X2018_1 <- df[df$country == country1, "X2018"]
X2018_2 <- df[df$country == country2, "X2018"]
X2018 <- c(X2018_1, X2018_2)
recent_change_1 <- df[df$country == country1, "recent_change"]
recent_change_2 <- df[df$country == country2, "recent_change"]
recent_change <- c(recent_change_1, recent_change_2)
data.frame(country, X2018, recent_change)
}
us_vs_cuba <- compare_countries(life_exp_df, "United States", "Cuba")
#The data set is a combination of three sources. Data from 1800 to 1970 is maily from Mattias Lindgren's complilation.
#Data from 1970 to 2016 is from IHME (Institute for Health Metrics and Evaluation, University of Washington, Seattle).
#Data from 2017 to 2099 UN's forecast on 2017.
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
get_col_mean <- function(col){
mean(col, na.rm = TRUE)
}
print(get_col_mean(life_exp_df[ , "X2018"]))
world_average <- lapply(life_exp_df[-1], get_col_mean)
world_change_18 <- world_average$X2018 - world_average$X1918
new_col <- ncol(life_exp_df)+1
life_exp_df[new_col] <- life_exp_df$X2016 - life_exp_df$X1996
colnames(life_exp_df)[new_col] <- "recent_change"
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE), "country"]
print(most_improved)
#take a data frame and a string of country name. It will return the the change
#in life expectancy between 1968 and 2018 of this country.
get_country_change <- function(df, country_name){
year_change <- df[df$country == country_name, "X2018"] - df[df$country == country_name, "X1968"]
print(year_change)
}
get_country_change(life_exp_df, "Haiti")
#take three argumets. They are a data frame and two countries' names. The function will return a data frame with
#the counties' names, life expectancies in 2018 and the recent changes.
compare_countries <- function(df, country1, country2){
country <- c(country1, country2)
X2018_1 <- df[df$country == country1, "X2018"]
X2018_2 <- df[df$country == country2, "X2018"]
X2018 <- c(X2018_1, X2018_2)
recent_change_1 <- df[df$country == country1, "recent_change"]
recent_change_2 <- df[df$country == country2, "recent_change"]
recent_change <- c(recent_change_1, recent_change_2)
data.frame(country, X2018, recent_change)
}
us_vs_cuba <- compare_countries(life_exp_df, "United States", "Cuba")
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
install.packages("dplyr")
library("dplyer")
library("dplyr")
install.packages("pscl")
library("pscl")
View(presidentialElections)
votes <- select(presidentialElections, demVote, year)
class(votes)
View(votes)
View(votes)
View(votes)
votes <- presidentialElections[, c ("year", "demVote")]
votes <- presidentialElections[, c ("year", "demVote")]
View(votes)
library("dplyr")
votes <- select(presidentialElections, demVote, year)
votes <- presidentialElections[, c ("year", "demVote")]
select(presidentialElections, state:year)
select(presidentialElections, -south)
grouped <- group_by(presidentialElections, state)
grouped
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
state_voting_summary <- presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
state_voting_summary <- presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
presidentialElections <- mutate(
presidentialElections,
other_parties_vote = 100 - demVote, # other parties is 100% - Democrat %
abs_vote_difference = abs(demVote - other_parties_vote)
)
state_voting_summary <- presidentialElections %>%
group_by(state) %>%
summarize(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
state_voting_summary
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
row_num <- nrow(ta_grades)
col_num <- ncol(ta_grades)
colnames_string <- paste( colnames(ta_grades) , collapse = ", " )
table_description <- paste("The grade data frame has ", row_num, " rows and ", col_num,
" cols: ", colnames_string , ".", sep = '')
print(table_description)
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
better_at_math <- c(ta_grades$math_grade>ta_grades$spanish_grade)
ta_grades[[4]] <- better_at_math
colnames(ta_grades)[4] <- "better_at_math"
print(ta_grades[ta_grades$ta == "Gavin Sreesangkom", ])
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == T, ])
print(num_better_at_math)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- 4.0
ta_grades[ ta_grades$spanish_grade > 4.0, "spanish_grade" ] <- 4.0
View(ta_grades)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- round(4,digits = 2)
ta_grades
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- round(4,digits = 1)
ta_grades
#################
#### PART 1 #####
#################
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
row_num <- nrow(ta_grades)
col_num <- ncol(ta_grades)
colnames_string <- paste( colnames(ta_grades) , collapse = ", " )
table_description <- paste("The grade data frame has ", row_num, " rows and ", col_num,
" cols: ", colnames_string , ".", sep = '')
print(table_description)
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
better_at_math <- c(ta_grades$math_grade>ta_grades$spanish_grade)
ta_grades[[4]] <- better_at_math
colnames(ta_grades)[4] <- "better_at_math"
print(ta_grades[ta_grades$ta == "Gavin Sreesangkom", ])
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == T, ])
print(num_better_at_math)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- round(4,digits = 1)
#################
#### PART 1 #####
#################
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
row_num <- nrow(ta_grades)
col_num <- ncol(ta_grades)
colnames_string <- paste( colnames(ta_grades) , collapse = ", " )
table_description <- paste("The grade data frame has ", row_num, " rows and ", col_num,
" cols: ", colnames_string , ".", sep = '')
print(table_description)
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
better_at_math <- c(ta_grades$math_grade>ta_grades$spanish_grade)
ta_grades[[4]] <- better_at_math
colnames(ta_grades)[4] <- "better_at_math"
print(ta_grades[ta_grades$ta == "Gavin Sreesangkom", ])
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == T, ])
print(num_better_at_math)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- round(4, digits = 1)
as.numeric(as.character(4.0))
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom",
"Coco Li", "George Zhang", "Saurav Sawansukha", "YuYu Madigan")
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
row_num <- nrow(ta_grades)
col_num <- ncol(ta_grades)
colnames_string <- paste( colnames(ta_grades) , collapse = ", " )
table_description <- paste("The grade data frame has ", row_num, " rows and ", col_num,
" cols: ", colnames_string , ".", sep = '')
print(table_description)
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
better_at_math <- c(ta_grades$math_grade>ta_grades$spanish_grade)
ta_grades[[4]] <- better_at_math
colnames(ta_grades)[4] <- "better_at_math"
print(ta_grades[ta_grades$ta == "Gavin Sreesangkom", ])
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == T, ])
print(num_better_at_math)
View(ta_grades)
ta_grades[ ta_grades$math_grade > 4.0, "math_grade" ] <- as.numeric(as.character(4.0))
ta_grades[ ta_grades$math_grade >= 4.0, "math_grade" ] <- as.character(4.0)
View(ta_grades)
ta_grades[ ta_grades$math_grade >= 4.0, "math_grade" ] <- as.character("4.0")
?rmorm
?stat::rnorm
?stats::rnorm
data("Titanic")
print(is.data.frame(Titanic))
Titanic_df <- data.frame(Titanic)
print(is.data.frame(Titanic_df))
children <- data.frame(
Titanic_df[Titanic_df$Age == "Child" , ]
)
num_children <- sum(children$Freq)
print(num_children)
not_survive <- Titanic_df[Titanic_df$Survived == "No", ]
most_losses <- not_survive[not_survive$Freq == max(not_survive$Freq), ]
print(most_losses)
data("vehicles")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
library(dplyr)
data("vehicles")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
hello <- vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), ]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
print(unique(makes))
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
print(unique(makes))
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
View(makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles)
View(makes)
makes
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
nrow(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, 1997)
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year == 1997)
vehicles_1997
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
arrange(vehicles_1997, hwy)
View(vehicles_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
arrange(vehicles_1997, hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles_1997 <- arrange(vehicles_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997 <- mutate(
vehicles_1997,
average = (vehicles_1997$hwy + vehicles_1997$cty)/2
)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(dplyr)
library("dplyr")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, delay_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(-flights, delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, _delayed_in_air)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air, na.rm = T))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
filter(flights, dest == "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
View(to_sea)
to_sea <- select(to_sea, origin, dest, delayed_in_air)
View(to_sea)
View(to_sea)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg = mean(delayed_in_air, na.rm = T))
# On average, did flights to SeaTac gain or loose time?
pull(summarize(to_sea, avg = mean(delayed_in_air, na.rm = T)))
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg = mean(delayed_in_air, na.rm = T))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
flights %>%
filter(dest == "SEA") %>%
select(origin, dest, delayed_in_air) %>%
View(to_sea)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
flights %>%
filter(dest == "SEA") %>%
select(origin, dest, delayed_in_air) %>%
summarise(avg_delayed = mean(delayed_in_air, na.rm = T))
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "http://api.github.com"
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
print(GET(base_uri, org_resource))
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
print(GET(paste0(base_uri, org_resource)))
GET(base_uri)
class(GET(base_uri))
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
print(response)
response$content
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_string <- content(response, "text")
print(response)
print(response_string)
# Convert the content variable from a JSON string into a data frame.
fromJSON(response_string)
# Convert the content variable from a JSON string into a data frame.
df <- fromJSON(response_string)
View(df)
# How many (public) repositories does the organization have?
print(nrow(df))
print(response)
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list()
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
uri <- paste0(base_uri, org_resource)
response <- GET(uri)
print(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
response_string <- content(response, "text")
# Convert the content variable from a JSON string into a data frame.
df <- fromJSON(response_string)
# How many (public) repositories does the organization have?
print(nrow(df))
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpint
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(
)
setwd("~/Desktop/book-exercises/chapter-14-exercises/exercise-1")
print(response)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
uri <- paste0(base_uri, org_resource)
print uri
print(uri)
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_end <- "/search/repositiories"
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositiories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(
q = "graphics"
)
# Send a GET request to the `search_endpoint`--including your params list as the
# `query`. Print the response to show that your request worked.
response_search <- GET(paste0(base_uri, search_end), query = query_params)
print(response_search)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_search_string <- fromJSON(response_search, "text")
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_search_string <- content(response_search, "text")
search_df <- fromJSON(response_search_string)
View(search_df)
class(search_df)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
repo_search[iterm]
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
names(repo_search)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
print(repo_search$total_count)
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_search_string <- content(response_search, "text")
repo_search <- fromJSON(response_search_string)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
print(repo_search$total_count)
repo_search
